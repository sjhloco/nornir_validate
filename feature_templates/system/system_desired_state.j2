{# ####### CMD: Set command variables on a per-os_type basis ####### #}
{% if 'ios' in os_type |string %}
{% set image_cmd = "show version" %}
{% set mgmt_acl_cmd = "show ip access-lists" %}
{% set module_cmd = "show module" %}
{% elif 'nxos' in os_type |string %}
{% set image_cmd = "show version" %}
{% set mgmt_acl_cmd = "show access-lists" %}
{% set module_cmd = "show module" %}
{% elif 'asa' in os_type |string %}
{% set image_cmd = "show version" %}
{% set mgmt_acl_cmd = "show run" %}
{% elif 'wlc' in os_type |string %}
{% set image_cmd = "show sysinfo" %}
{% elif 'panos' in os_type |string %}
{% set sla_cmd = "show high-availability path-monitoring" %}
{% endif %}


{# ##### VAL_CMDS: Build a dictionary of commands used for creating the validation file ##### #}
{% if sub_features.__class__.__name__ == 'list' %}
- {{ feature }}:
{% for sub_feat in sub_features %}
{% if sub_feat == 'image' and image_cmd is defined %}
    image: 
      {{ image_cmd }}: VALIDATE
{% elif 'mgmt_acl' in sub_feat and mgmt_acl_cmd is defined %}
    mgmt_acl:
{% if sub_feat.mgmt_acl.__class__.__name__ == 'list' %}
{% for each_acl in sub_feat.mgmt_acl %}
      {{ mgmt_acl_cmd }} {{ each_acl }}: VALIDATE
{% endfor %}
{% else %}
      {{ mgmt_acl_cmd }}: VALIDATE
{% endif %}
{% elif sub_feat == 'module' and module_cmd is defined %}
    module:
      {{ module_cmd }}: VALIDATE
{% elif sub_feat == 'sla' and sla_cmd is defined %}
    sla:
      {{ sla_cmd }}: VALIDATE
{# ##### End statements: for sub_feature and sub_feature conditional  ##### #}
{% endif %}{% endfor %}


{# ##### DESIRED_STATE: Build desired state of the feature and each sub-feature ##### #}
{% else %}
- {{ feature }}:
{% for sub_feat, input_vars in sub_features.items() %}
{# ### IMAGE: {cmd: code_number}} ### #}
{% if sub_feat == 'image' %}
    image: 
      {{ image_cmd }}: 
        {{ input_vars }}
{# ### MGMT ACL: {cmd: {acl_name: {seq_num: {protocol: ip/tcp/udp, src: src_ip, dst: dst_ip, dst_port: port}}} ### #}
{% elif sub_feat == 'mgmt_acl' %}
    mgmt_acl:
{% for acl_name, ace_info in input_vars.items() %}
      {{ mgmt_acl_cmd }} {{ acl_name }}:
        {{ acl_name }}:
          _mode: strict
{% set seq = namespace(cnt=10) %}
{% for each_ace in ace_info.ace %}
{% if each_ace.keys() | list | first != 'remark' %}
          {{ seq.cnt }}:
            action: {{ each_ace.keys() | list | first }}
            protocol: ip
            src: {{ each_ace.values() | list | first }}
            dst: any
{% set seq.cnt = seq.cnt + 10 %}
{% endif %}{% endfor %}{% endfor %}
{# ### MODULE: {module_num: {model: xxx, status, ok}} ### #}
{% elif sub_feat == 'module' %}
    module:
      {{ module_cmd }}:
{% for each_mod, mod_info in input_vars.items() %}
        {{ each_mod }}:
          model: {{ mod_info.model }}
          status: {{ mod_info.status | default('ok') }}
{% endfor %}
{# ### SLA: {cmd: {grp_name: {dst: {rtt: x, State: Up}}}} ### #}
{% elif sub_feat == 'sla' %}
    sla:
      {{ sla_cmd }}:
{% for grp, dst in input_vars.items() %}
        {{ grp }}:
{% for name, values in dst.items() %}
          {{ name }}:
            rtt: {{ values.rtt | round | int }}
            state: Up
{% endfor %}{% endfor %}
{# ##### End statements: for sub_feature and sub_feature conditional  ##### #}
{% endif %}{% endfor %}
{% endif %}