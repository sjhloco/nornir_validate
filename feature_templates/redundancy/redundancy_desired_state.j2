{# ####### CMD: Set command variables on a per-os_type basis ####### #}
{% if 'ios' in os_type |string %}
{% set ha_state_cmd = "show redundancy" %}
{% set sw_stack_cmd = "show switch detail" %}
{% elif 'nxos' in os_type |string %}
{% elif 'asa' in os_type |string %}
{% set ha_state_cmd = "show failover" %}
{% elif 'wlc' in os_type |string %}
{% set ha_state_cmd = "show redundancy summary" %}
{% endif %}


{# ##### VAL_CMDS: Build a dictionary of commands used for creating the validation file ##### #}
{% if sub_features.__class__.__name__ == 'list' %}
- {{ feature }}:
{% for sub_feat in sub_features %}
{% if sub_feat == 'ha_state' and ha_state_cmd is defined %}
    ha_state:
      {{ ha_state_cmd }}: VALIDATE
{% elif sub_feat == 'sw_stack' and sw_stack_cmd is defined %}
    sw_stack:
      {{ sw_stack_cmd }}: VALIDATE
{# ##### End statements: for sub_feature and sub_feature conditional  ##### #}
{% endif %}{% endfor %}


{# ##### DESIRED_STATE: Build desired state of the feature and each sub-feature ##### #}
{% else %}
- {{ feature }}:
{% for sub_feat, input_vars in sub_features.items() %}
{# ### HA_STATE: {local_state: ACTIVE, peer_state: STANDBY HOT} ### #}
{% if sub_feat == 'ha_state' %}
    ha_state:
      {{ ha_state_cmd }}:
        local: {{ input_vars.local }}
        peer: {{ input_vars.peer }}
{# ### SWI_STACK: {switchx: {priority: x, role: x, state: Ready}} ### #}
{% elif sub_feat == 'sw_stack' %}
    sw_stack:
      {{ sw_stack_cmd }}:
        _mode: strict
{% for each_swi, swi_info in input_vars.items() %}
        {{ each_swi }}:
          priority: {{ swi_info.priority }}
          role: {{ swi_info.role }}
          state: Ready
{% endfor %}
{# ##### End statements: for sub_feature and sub_feature conditional  ##### #}
{% endif %}{% endfor %}
{% endif %}
